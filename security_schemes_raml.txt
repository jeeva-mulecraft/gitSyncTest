#%RAML 1.0 Library -----
usage: Security schemes for GitHub-GitLab synchronization API

securitySchemes:
  basicAuth:
    displayName: Basic Authentication
    description: |
      Basic HTTP authentication using username and password.
      The credentials should be base64 encoded in the format username:password
      and sent in the Authorization header as "Basic <encoded-credentials>".
      
      Example:
      - Username: api-user
      - Password: secret-password
      - Encoded: YXBpLXVzZXI6c2VjcmV0LXBhc3N3b3Jk
      - Header: Authorization: Basic YXBpLXVzZXI6c2VjcmV0LXBhc3N3b3Jk
    type: Basic Authentication
    settings:
      username:
        type: string
        description: API username for authentication
        minLength: 3
        maxLength: 50
        pattern: ^[a-zA-Z0-9_-]+$
        example: api-user
      password:
        type: string
        description: API password for authentication
        minLength: 8
        maxLength: 128
        example: secret-password

  apiKey:
    displayName: API Key Authentication
    description: |
      API Key authentication using a custom header.
      The API key should be sent in the X-API-Key header.
      
      Example:
      - Header: X-API-Key: your-api-key-here
    type: Pass Through
    describedBy:
      headers:
        X-API-Key:
          type: string
          description: API key for authentication
          pattern: ^[a-zA-Z0-9]{32,64}$
          example: abc123def456ghi789jkl012mno345pqr678stu901vwx234yz
          required: true
      responses:
        401:
          description: Invalid or missing API key
          body:
            application/json:
              properties:
                error:
                  type: string
                  example: INVALID_API_KEY
                message:
                  type: string
                  example: Invalid or missing API key

  oauth2:
    displayName: OAuth 2.0 Bearer Token
    description: |
      OAuth 2.0 Bearer Token authentication.
      The token should be sent in the Authorization header as "Bearer <token>".
      
      Example:
      - Header: Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
    type: OAuth 2.0
    settings:
      authorizationUri: https://github.com/login/oauth/authorize
      accessTokenUri: https://github.com/login/oauth/access_token
      authorizationGrants: [authorization_code, client_credentials]
      scopes:
        - repo
        - read:user
        - write:repo_hook
    describedBy:
      headers:
        Authorization:
          type: string
          description: OAuth 2.0 Bearer token
          pattern: ^Bearer [a-zA-Z0-9\-_]+\.[a-zA-Z0-9\-_]+\.[a-zA-Z0-9\-_]+$
          example: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
          required: true
      responses:
        401:
          description: Invalid or expired bearer token
          body:
            application/json:
              properties:
                error:
                  type: string
                  example: INVALID_TOKEN
                message:
                  type: string
                  example: Invalid or expired bearer token

  webhookSignature:
    displayName: Webhook Signature Verification
    description: |
      Webhook signature verification for GitHub and GitLab webhooks.
      GitHub uses HMAC-SHA256 signature in X-Hub-Signature-256 header.
      GitLab uses a secret token in X-GitLab-Token header.
    type: Pass Through
    describedBy:
      headers:
        X-Hub-Signature-256?:
          type: string
          description: GitHub webhook HMAC-SHA256 signature
          pattern: ^sha256=[a-f0-9]{64}$
          example: sha256=abc123def456ghi789jkl012mno345pqr678stu901vwx234yz567890abcdef12
        X-GitLab-Token?:
          type: string
          description: GitLab webhook secret token
          pattern: ^[a-zA-Z0-9]{16,64}$
          example: gitlab-webhook-secret-token
      responses:
        401:
          description: Invalid webhook signature or token
          body:
            application/json:
              properties:
                error:
                  type: string
                  example: INVALID_SIGNATURE
                message:
                  type: string
                  example: Webhook signature verification failed

  combinedAuth:
    displayName: Combined Authentication
    description: |
      Combined authentication supporting multiple methods:
      1. Basic Authentication for API access
      2. Webhook signature verification for webhook endpoints
      
      The authentication method is determined by the endpoint and headers present.
    type: Pass Through
    describedBy:
      headers:
        Authorization?:
          type: string
          description: Basic authentication header or Bearer token
          example: Basic YXBpLXVzZXI6c2VjcmV0LXBhc3N3b3Jk
        X-Hub-Signature-256?:
          type: string
          description: GitHub webhook signature
          example: sha256=abc123def456
        X-GitLab-Token?:
          type: string
          description: GitLab webhook token 
          example: gitlab-webhook-secret
        X-API-Key?:
          type: string
          description: API key for programmatic access
          example: abc123def456ghi789
      responses:
        401:
          description: Authentication failed
          body:
            application/json:
              properties:
                error:
                  type: string
                  example: AUTHENTICATION_FAILED
                message:
                  type: string
                  example: Authentication required or invalid credentials provided
